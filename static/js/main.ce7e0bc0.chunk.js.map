{"version":3,"sources":["../../../Memory-Game/memorygame/src/components/BodyWrapper/BodyWrapper.js","../../../Memory-Game/memorygame/src/components/CharacterWrapper/CharacterWrapper.js","../../../Memory-Game/memorygame/src/components/Score/Score.js","../../../Memory-Game/memorygame/src/components/Status/Status.js","../../../Memory-Game/memorygame/src/components/Navbar/Navbar.js","../../../Memory-Game/memorygame/src/components/Jumbotron/Jumbotron.js","../../../Memory-Game/memorygame/src/components/CharacterCard/CharacterCard.js","../../../Memory-Game/memorygame/src/App.js","../../../Memory-Game/memorygame/src/index.js"],"names":["BodyWrapper","props","react_default","a","createElement","className","children","CharacterWrapper","Score","this","currentScore","highestScore","Component","Status","status","Navbar","components_Status_Status","components_Score_Score","Jumbotron","CharacterCard","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClickEvent","state","clicked","setState","updateHighestScore","restartGame","increaseScore","shuffleArray","characters","bind","assertThisInitialized","src","image","alt","concat","name","onClick","App","setTimeout","arr","shuffledArray","i","length","shuffleIndex","Math","round","random","push","filter","el","_this2","Navbar_Navbar","components_Jumbotron_Jumbotron","BodyWrapper_BodyWrapper","CharacterWrapper_CharacterWrapper","map","character","components_CharacterCard_CharacterCard","id","key","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ce7e0bc0.chunk.js","sourcesContent":["import React from 'react';\nimport './body-wrapper.css';\n\nfunction BodyWrapper(props) {\n    return <div className='BodyWrapper'>{props.children}</div>;\n  }\n  \nexport default BodyWrapper;\n  \n\n\n","import React from 'react';\nimport './character-wrapper.css';\n\nfunction CharacterWrapper(props) {\n    return <div className='CharacterWrapper'>{props.children}</div>;\n    \n}\n\nexport default CharacterWrapper;","import React, { Component } from 'react';\n\nclass Score extends Component {\n\n    render() {\n        return (\n            <div className=\"nav-item\">Current Score: {this.props.currentScore} | Highest Score: {this.props.highestScore}</div>\n        )\n    }\n}\n\nexport default Score;\n","import React, { Component } from 'react';\n\nclass Status extends Component {\n\n    render() {\n        return (\n            <div className=\"nav-item\">{this.props.status}</div>\n        )\n    }\n}\n\nexport default Status;\n","import React from 'react';\nimport Score from '../Score/Score';\nimport Status from '../Status/Status';\nimport './navbar.css';\n\n\nfunction Navbar (props) {\n    return (\n        <nav>\n            <div className=\"nav-item\">Harry Potter Memory Game</div>\n            <Status {...props} />\n            <Score {...props}/>\n        </nav>\n\n    )   \n}\n\n\n\nexport default Navbar;","import React, { Component } from 'react';\nimport './jumbotron.css';\n\nclass Jumbotron extends Component {\n    render() {\n        return (\n            <div className=\"jumbotron\">\n                <div className=\"instructions-div\">\n                    <p>Welcome to Harry Potter Memory Game!</p>\n                    <p>Click an image to earn points!</p>\n                    <p> But be careful, if you click one you already have before, you lose! Remember wisely :)</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Jumbotron;","import React, { Component } from 'react';\nimport characters from '../../characters.json';\n\nimport \"./character-card.css\";\n\n\nclass CharacterCard extends Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            clicked: false\n        }\n        this.handleClickEvent = this.handleClickEvent.bind(this) \n\n    }\n\n    handleClickEvent = () => {\n        if (!this.state.clicked) {\n            this.setState({\n              clicked: true\n            });\n            this.props.increaseScore();\n            this.props.updateHighestScore();\n            this.props.shuffleArray(characters);\n        } else {\n            this.setState({\n                clicked: false\n            });\n            this.props.updateHighestScore();\n            this.props.restartGame();\n        }\n    }\n\n   \n\n    render() {\n        return (\n            <div>\n                <img className='avatar' src={this.props.image} alt={`${this.props.name} avatar`} onClick={this.handleClickEvent} />\n            </div>\n        )\n    }\n}\n\nexport default CharacterCard;\n\n\n\n","import React, { Component } from 'react';\nimport BodyWrapper from './components/BodyWrapper/BodyWrapper';\nimport CharacterWrapper from './components/CharacterWrapper/CharacterWrapper';\nimport Navbar from './components/Navbar/Navbar.js';\nimport Jumbotron from './components/Jumbotron/Jumbotron.js'\nimport CharacterCard from './components/CharacterCard/CharacterCard.js';\nimport characters from './characters.json';\n\nclass App extends Component {\n\n  state = {\n    characters: characters,\n    currentScore: 0,\n    highestScore: 0,\n    status: \"Click to begin!\"\n  }\n\n  increaseScore = () => {\n    this.setState({\n      currentScore: this.state.currentScore + 1,\n      status: \"Awesome! Adding a point!\"\n    });\n\n    setTimeout(() => {\n      this.setState({\n        status: \"Click another image!\"\n      })\n    }, 800)\n  }\n\n  updateHighestScore = () => {\n    if (this.state.highestScore < this.state.currentScore) {\n      this.setState({\n        highestScore: this.state.currentScore\n      })\n    }\n  }\n\n  restartGame = () => {\n    this.setState({\n      currentScore: 0,\n      status: \"Sorry! Game over! Click to play again!\"\n    })\n  }\n\n  shuffleArray = (arr) => {\n\n    let shuffledArray = []\n\n    for (let i = 0; i < arr.length; i++) {\n      let shuffleIndex = Math.round(Math.random() * arr.length);\n\n      if (shuffledArray[shuffleIndex]) {\n          shuffledArray.push(arr[i])\n      } else {\n          shuffledArray[shuffleIndex] = arr[i]\n      }\n    }\n\n    shuffledArray = shuffledArray.filter(el => el != null)\n\n    this.setState({\n      characters: shuffledArray\n    })\n  }\n\n  render () {\n    return (\n      <div>\n\n        <Navbar status={this.state.status} currentScore={this.state.currentScore} highestScore={this.state.highestScore} />\n        <Jumbotron />\n        <BodyWrapper> \n          <CharacterWrapper>\n            {this.state.characters.map(character => (\n              <CharacterCard \n              id={character.id}\n              key={character.id}\n              name={character.name} \n              image={character.image}\n              increaseScore={this.increaseScore}\n              updateHighestScore={this.updateHighestScore}\n              restartGame={this.restartGame}\n              shuffleArray={this.shuffleArray}\n              />\n            ))}\n            </CharacterWrapper>\n        </BodyWrapper>\n        \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}